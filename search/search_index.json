{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About \u00b6 Hi, I work as Senior Developer at Fathom where I develop software tools to map flood risk at continental scales. I'm in the final stage of my PhD within the Marie Curie project System-Risk at the University of Bristol's Hydrology Group . I hold an MSc in Environmental Fluid Mechanics from the Universite Grenoble Alpes and a BSc in Mechanical Engineering from the Universidad San Francisco de Quito. My Research interests are flooding, earth observation, geospatial analysis, python, data visualization, deep learning, big data, containers and cloud. I've worked in geoscience research for more than eight years. I have expertise on large datasets at global-scale (NOAA-GFS, Era-Interim, ESA-GlobWave, Landsat, Sentinels) geo formats (GeoTIFF, NetCDF, GRIB) programming languages (Python, Matlab, Fortran, C++, learning Node.js), big data geosciences portals ( Google Earth Engine , Pangeo , OpenStreetMap , Mapbox ) and workflow automation & orchestration.","title":"About"},{"location":"#about","text":"Hi, I work as Senior Developer at Fathom where I develop software tools to map flood risk at continental scales. I'm in the final stage of my PhD within the Marie Curie project System-Risk at the University of Bristol's Hydrology Group . I hold an MSc in Environmental Fluid Mechanics from the Universite Grenoble Alpes and a BSc in Mechanical Engineering from the Universidad San Francisco de Quito. My Research interests are flooding, earth observation, geospatial analysis, python, data visualization, deep learning, big data, containers and cloud. I've worked in geoscience research for more than eight years. I have expertise on large datasets at global-scale (NOAA-GFS, Era-Interim, ESA-GlobWave, Landsat, Sentinels) geo formats (GeoTIFF, NetCDF, GRIB) programming languages (Python, Matlab, Fortran, C++, learning Node.js), big data geosciences portals ( Google Earth Engine , Pangeo , OpenStreetMap , Mapbox ) and workflow automation & orchestration.","title":"About"},{"location":"contact/","text":"Contact \u00b6 On GitHub @jsosa On Twitter @jsosatw On LinkedIn @jsosain On Google Scholar link On Research Gate link Feel free to contact me at sosa.jeison@gmail.com or j.sosa@bristol.ac.uk","title":"Contact"},{"location":"contact/#contact","text":"On GitHub @jsosa On Twitter @jsosatw On LinkedIn @jsosain On Google Scholar link On Research Gate link Feel free to contact me at sosa.jeison@gmail.com or j.sosa@bristol.ac.uk","title":"Contact"},{"location":"gdalutils/","text":"gdalutils \u00b6 gdalutils is a small library to handle GDAL-based raster files Installation \u00b6 Just run this line after installing all dependencies pip install git+https://github.com/jsosa/gdalutils.git Dependencies \u00b6 Geopandas Cython GDAL Usage \u00b6 The module is loaded via import gdalutils as gu To read a raster directly from disk it can be done by gu . get_data ( filename ) It'll return a numpy.array object Geographical information can be read via gu . get_geo ( filename ) it'll return a Pyhton list containing xmin ymin xmax ymax number of cells x direction number of cells y direction resolution x direction resolution y direction an array containing center coordiantes of x cells an array containing center coordiantes of y cells projection nodata value Writing numpy.array object is posible by calling gu . write_raster ( myarray , myraster , geo , fmt , nodata ) Where myarray is a numpy.array object, myraster is a filename output, geo is a list with geographical information identical to the one obtained with gu.get_geo , fmt is the format output: 'Float32' , 'Float64' , etc and nodata is the NODATA value Passing from a numpy.array object to a pandas.Dataframe object is posible by array_to_pandas ( dat , geo , val , symbol ) where dat is the n umpy.array object, geo is the list containing geographical information, val is a value to be masked and symbol is the logical symbol to be applied Passing from pandas to array is also possible via pandas_to_array ( df , geo , nodata )","title":"gdalutils"},{"location":"gdalutils/#gdalutils","text":"gdalutils is a small library to handle GDAL-based raster files","title":"gdalutils"},{"location":"gdalutils/#installation","text":"Just run this line after installing all dependencies pip install git+https://github.com/jsosa/gdalutils.git","title":"Installation"},{"location":"gdalutils/#dependencies","text":"Geopandas Cython GDAL","title":"Dependencies"},{"location":"gdalutils/#usage","text":"The module is loaded via import gdalutils as gu To read a raster directly from disk it can be done by gu . get_data ( filename ) It'll return a numpy.array object Geographical information can be read via gu . get_geo ( filename ) it'll return a Pyhton list containing xmin ymin xmax ymax number of cells x direction number of cells y direction resolution x direction resolution y direction an array containing center coordiantes of x cells an array containing center coordiantes of y cells projection nodata value Writing numpy.array object is posible by calling gu . write_raster ( myarray , myraster , geo , fmt , nodata ) Where myarray is a numpy.array object, myraster is a filename output, geo is a list with geographical information identical to the one obtained with gu.get_geo , fmt is the format output: 'Float32' , 'Float64' , etc and nodata is the NODATA value Passing from a numpy.array object to a pandas.Dataframe object is posible by array_to_pandas ( dat , geo , val , symbol ) where dat is the n umpy.array object, geo is the list containing geographical information, val is a value to be masked and symbol is the logical symbol to be applied Passing from pandas to array is also possible via pandas_to_array ( df , geo , nodata )","title":"Usage"},{"location":"hydroutils/","text":"hydroutils \u00b6 hydroutils is a small python library to solve common problems in Hydrology Current features \u00b6 Annual maxima estimation Statistical distribution fitting Distribution parameters estimation based on L-moments or MLE Installation \u00b6 Just run this line pip install git+https://github.com/jsosa/hydroutils.git Dependencies \u00b6 Pandas statsmodels scipy Usage \u00b6 The module is called via import hydroutils.core as hu hydroutils uses a pd.DataFrame object with indexes using a pd.DatetimeIndex object: Annual maxima (AMAX) is calculated via: hu . find_events_amax ( serie ) where serie is the pd.DataFrame object defined before AMAX can be visualized via: ax = serie . plot () amax . plot ( ax = ax , style = 'o' , c = 'Red' ) ax . set_xlabel ( 'Date' ) ax . set_ylabel ( 'Discharge (m^3/s)' ) A plot showing a fitted distribution can be obtained via: amax_vals = np . sort ( amax . values . squeeze ())[ 1 :] ax = hu . plot_return ( amax_vals , hu . stats . pearson3 , 'mle' ) where amax_vals is the pd.DataFrame object obtained in the previous step hu.stats.pearson3 can be replaced by any other distribution from Scipy, check a list of distributions available here https://docs.scipy.org/doc/scipy/reference/stats.html . mle is the method used to estimate the distribution parameters. Optionally lmo can also be used to estimate parameters by using original fortran J.R.M Hosking subroutines. In hydrology is preferred to work with Return Periods, then a function has been created to retreive corresponding discharge value to a given return period Retrive discharge for a given return period can be done via: hu . get_dis_rp ( amax . values , hu . stats . pearson3 , ret , 'mle' ) where amax_vals is the pd.DataFrame object containing annual maxima, hu.stats.pearson3 is a statistical distribution from Scipy, ret is a return period for example 100 for a 100-yr return period and mle is the method used to estimate parameters in the distribution.","title":"hydroutils"},{"location":"hydroutils/#hydroutils","text":"hydroutils is a small python library to solve common problems in Hydrology","title":"hydroutils"},{"location":"hydroutils/#current-features","text":"Annual maxima estimation Statistical distribution fitting Distribution parameters estimation based on L-moments or MLE","title":"Current features"},{"location":"hydroutils/#installation","text":"Just run this line pip install git+https://github.com/jsosa/hydroutils.git","title":"Installation"},{"location":"hydroutils/#dependencies","text":"Pandas statsmodels scipy","title":"Dependencies"},{"location":"hydroutils/#usage","text":"The module is called via import hydroutils.core as hu hydroutils uses a pd.DataFrame object with indexes using a pd.DatetimeIndex object: Annual maxima (AMAX) is calculated via: hu . find_events_amax ( serie ) where serie is the pd.DataFrame object defined before AMAX can be visualized via: ax = serie . plot () amax . plot ( ax = ax , style = 'o' , c = 'Red' ) ax . set_xlabel ( 'Date' ) ax . set_ylabel ( 'Discharge (m^3/s)' ) A plot showing a fitted distribution can be obtained via: amax_vals = np . sort ( amax . values . squeeze ())[ 1 :] ax = hu . plot_return ( amax_vals , hu . stats . pearson3 , 'mle' ) where amax_vals is the pd.DataFrame object obtained in the previous step hu.stats.pearson3 can be replaced by any other distribution from Scipy, check a list of distributions available here https://docs.scipy.org/doc/scipy/reference/stats.html . mle is the method used to estimate the distribution parameters. Optionally lmo can also be used to estimate parameters by using original fortran J.R.M Hosking subroutines. In hydrology is preferred to work with Return Periods, then a function has been created to retreive corresponding discharge value to a given return period Retrive discharge for a given return period can be done via: hu . get_dis_rp ( amax . values , hu . stats . pearson3 , ret , 'mle' ) where amax_vals is the pd.DataFrame object containing annual maxima, hu.stats.pearson3 is a statistical distribution from Scipy, ret is a return period for example 100 for a 100-yr return period and mle is the method used to estimate parameters in the distribution.","title":"Usage"},{"location":"lfptools/","text":"LFPtools \u00b6 LFPtools is an open-source Python CLI package which encompass most methods commonly used to prepare input data for large scale flood inundation studies using the LISFLOOD-FP hydrodynamic model. Installation \u00b6 1. Via pip \u00b6 Just run this line after installing all dependencies pip install git+https://github.com/jsosa/LFPtools.git 2. Docker \u00b6 To facilitate the installation process, we have published the Dockerfile so you can get LFPtools running in a docker container docker pull jsosa/dkr-lfptools docker run --rm -it jsosa/dkr-lfptools Dependencies \u00b6 Pandas Geopandas xarray Cython TauDEM gdalutils Description of tools \u00b6 lfp-getdepths: Get river depths, three methods availables: 1) get depths from a raster of depths 2) get depths by using hydraulic geometry equation depth = r * width ^ p and 3) get depths by using simplified mannings equation lfp-getwidths: Retrieve river widths from a external data set (e.g. GRWL , GWD-LR ) lfp-getbankelevs: Get river banks elevations from a high resolution DEM by reductions method like nearest neighbour, mean, min or meanmin. Additionally, an outlier detection can be applied to before running the reduction method. lfp-fixelevs: Fix DEM elevations using either of two methods: yamazaki (Yamazaki et al., 2012 J. Hydrol), lowless (Locally Weighted Scatterplot Smoothing) lfp-getbedelevs: Get bed elevations by substracting depth from banks lfp-getdischarge: Retrieve discharge from a netCDF source following a predefined inflows locations (e.g. from lfp-getinflows) lfp-getinflows: Locate inflow points that can be used as boundary condition from a source (e.g. discharge gridded data) lfp-getslopes: Estimate slopes from a bank file (e.g. from lfp-fixelevs), slope is estimated by fitting a 1st order model on the elevations. The number of elevations to take is based on the parameter step in the config.txt file lfp-rasterresample: Resample a DEM by upscaling. It applies a reductions method like mean, min or meanmin. Outlier detection is also available before running the reduction method. nproc option defines number of cores to be used when resampling. Usage \u00b6 1. Via Command Line Interface CLI \u00b6 Programs run by reading input parameters from a configuration file config.txt via -i option after the tool's name, in the terminal: $ lfp-getwidhts -i config.txt Input parameters in the configuration file for each tool can be obtained via -h option after the tool name: $ lfp-getwidhts -h LFPtools v0.1 Name ---- getwidths Description ----------- Retrieve river widths from a data set Usage ----- $ lfp-getwidths -i config.txt Content in config.txt --------------------- [ getwidths ] thresh = Searching window threshold in same units as input data set output = Shapefile output file path recf = ` Rec ` file path netf = Target mask file path proj = Output projection in Proj4 format fwidth = Source width file path GDAL format 2. Within a Python environment \u00b6 LFPtools can be imported within Python using import lfptools as lfp License \u00b6 BSD 3-Clause License Copyright (c) 2018, Jeison Sosa All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"LFPtools"},{"location":"lfptools/#lfptools","text":"LFPtools is an open-source Python CLI package which encompass most methods commonly used to prepare input data for large scale flood inundation studies using the LISFLOOD-FP hydrodynamic model.","title":"LFPtools"},{"location":"lfptools/#installation","text":"","title":"Installation"},{"location":"lfptools/#1-via-pip","text":"Just run this line after installing all dependencies pip install git+https://github.com/jsosa/LFPtools.git","title":"1. Via pip"},{"location":"lfptools/#2-docker","text":"To facilitate the installation process, we have published the Dockerfile so you can get LFPtools running in a docker container docker pull jsosa/dkr-lfptools docker run --rm -it jsosa/dkr-lfptools","title":"2. Docker"},{"location":"lfptools/#dependencies","text":"Pandas Geopandas xarray Cython TauDEM gdalutils","title":"Dependencies"},{"location":"lfptools/#description-of-tools","text":"lfp-getdepths: Get river depths, three methods availables: 1) get depths from a raster of depths 2) get depths by using hydraulic geometry equation depth = r * width ^ p and 3) get depths by using simplified mannings equation lfp-getwidths: Retrieve river widths from a external data set (e.g. GRWL , GWD-LR ) lfp-getbankelevs: Get river banks elevations from a high resolution DEM by reductions method like nearest neighbour, mean, min or meanmin. Additionally, an outlier detection can be applied to before running the reduction method. lfp-fixelevs: Fix DEM elevations using either of two methods: yamazaki (Yamazaki et al., 2012 J. Hydrol), lowless (Locally Weighted Scatterplot Smoothing) lfp-getbedelevs: Get bed elevations by substracting depth from banks lfp-getdischarge: Retrieve discharge from a netCDF source following a predefined inflows locations (e.g. from lfp-getinflows) lfp-getinflows: Locate inflow points that can be used as boundary condition from a source (e.g. discharge gridded data) lfp-getslopes: Estimate slopes from a bank file (e.g. from lfp-fixelevs), slope is estimated by fitting a 1st order model on the elevations. The number of elevations to take is based on the parameter step in the config.txt file lfp-rasterresample: Resample a DEM by upscaling. It applies a reductions method like mean, min or meanmin. Outlier detection is also available before running the reduction method. nproc option defines number of cores to be used when resampling.","title":"Description of tools"},{"location":"lfptools/#usage","text":"","title":"Usage"},{"location":"lfptools/#1-via-command-line-interface-cli","text":"Programs run by reading input parameters from a configuration file config.txt via -i option after the tool's name, in the terminal: $ lfp-getwidhts -i config.txt Input parameters in the configuration file for each tool can be obtained via -h option after the tool name: $ lfp-getwidhts -h LFPtools v0.1 Name ---- getwidths Description ----------- Retrieve river widths from a data set Usage ----- $ lfp-getwidths -i config.txt Content in config.txt --------------------- [ getwidths ] thresh = Searching window threshold in same units as input data set output = Shapefile output file path recf = ` Rec ` file path netf = Target mask file path proj = Output projection in Proj4 format fwidth = Source width file path GDAL format","title":"1. Via Command Line Interface CLI"},{"location":"lfptools/#2-within-a-python-environment","text":"LFPtools can be imported within Python using import lfptools as lfp","title":"2. Within a Python environment"},{"location":"lfptools/#license","text":"BSD 3-Clause License Copyright (c) 2018, Jeison Sosa All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"License"},{"location":"more/","text":"More open source software \u00b6 For a full list of my open source software please visit my Github account github.com/jsosa","title":"more..."},{"location":"more/#more-open-source-software","text":"For a full list of my open source software please visit my Github account github.com/jsosa","title":"More open source software"},{"location":"news/","text":"Latest news \u00b6 A ridge map of Cotopaxi volcano \u00b6 This is Ecuador's tallest active volcano Cotopaxi on a ridge map. Map via ridge_map from @colindcarroll such an amazing tool! Plotting global surface water \u00b6 I combined Google Earth Engine, OpenStreetMap and Mapbox to plot global surface water Yellow outline is water derived from OpenStreetmMap Grid is Water Occurrence derived from Landsat (Pekel et al., 2016) Realistic 3D Cotopaxi volcano \u00b6 An old topographic map from my country brought to life. The Cotopaxi volcano with a peak of 5897 m in Ecuador. View larger https://photos.app.goo.gl/de9yeaB3YFzrTF9C9 Thanks to @jscarto for the tips. Original Cotopaxi map Blender3D Cotopaxi Void-filled LIDAR for England \u00b6 Filling voids in LIDAR data using OS Terrain 50, handling/interpolating ~150 million cells! Original LIDAR Void-filled LIDAR","title":"Latest news"},{"location":"news/#latest-news","text":"","title":"Latest news"},{"location":"news/#a-ridge-map-of-cotopaxi-volcano","text":"This is Ecuador's tallest active volcano Cotopaxi on a ridge map. Map via ridge_map from @colindcarroll such an amazing tool!","title":"A ridge map of Cotopaxi volcano"},{"location":"news/#plotting-global-surface-water","text":"I combined Google Earth Engine, OpenStreetMap and Mapbox to plot global surface water Yellow outline is water derived from OpenStreetmMap Grid is Water Occurrence derived from Landsat (Pekel et al., 2016)","title":"Plotting global surface water"},{"location":"news/#realistic-3d-cotopaxi-volcano","text":"An old topographic map from my country brought to life. The Cotopaxi volcano with a peak of 5897 m in Ecuador. View larger https://photos.app.goo.gl/de9yeaB3YFzrTF9C9 Thanks to @jscarto for the tips. Original Cotopaxi map Blender3D Cotopaxi","title":"Realistic 3D Cotopaxi volcano"},{"location":"news/#void-filled-lidar-for-england","text":"Filling voids in LIDAR data using OS Terrain 50, handling/interpolating ~150 million cells! Original LIDAR Void-filled LIDAR","title":"Void-filled LIDAR for England"},{"location":"outlierml/","text":"outlierml \u00b6 outlierml is a small python library to detect outliers in 2D arrays based on scikit-learn outlier detection functions: Local Outlier Factor (LOF), Robust Covariance (RC) and Isolation Forest (IF). Installation \u00b6 Just run this line pip install git+https://github.com/jsosa/outlierml.git Dependencies \u00b6 Pandas xarray scikit-learn Usage \u00b6 It includes a command-line tool that can be called through >> outlierml -i <initfile> where <initfile> is a text file including the following information [outlierml] file = NetCDF file path method = <LOF> for Local Outlier Factor , <RC> for Robust Covariance , <IF> for Isolation Forest outputdir = Output directory contamination = Contamination fraction from 0 to 1 decomposition = True or False to deseasonalize time series The command-line program generates two files: stats.nc and log.csv containing information on when and where outliers happened. The outlierml module can also be called via from outlierml import run_outlierml where run_outlierml is a function which receives a xarray.Dataset object and returns 1) a mask with outliers in a xarray.DataArray object and 2) a pd.DataFrame object, same but in tabular format ```python def run_outlierml(nc,method,contamination,varname,latname,lonname,timname,decomposition=False): \"\"\" Function which detects outliers in a xarray.Dataset Inputs ------ nc : (xarray.Dataset) method : Local Outlier Factor (LOF), Robust Covariance (RC), Isolation Forest (IF) contamination : Contamination fraction from 0 to 1 decomposition : True or False time series to deseasonalization varname : (string) with varname label latname : (string) with latitude label lonname : (string) with longitude label timname : (string) with time label Returns ------- foo : (xarray.DataArray) containing freq, mean, std csv : (pd.DataFrame) containing time, lat, lon, value, mean, std \"\"\" ``` Isolation forest \u00b6 One efficient way of performing outlier detection in high-dimensional datasets is to use random forests. The ensemble.IsolationForest \u2018isolates\u2019 observations by randomly selecting a feature and then randomly selecting a split value between the maximum and minimum values of the selected feature. References: Liu, Fei Tony, Ting, Kai Ming and Zhou, Zhi-Hua. \u201cIsolation forest.\u201d Data Mining, 2008. ICDM\u201808. Eighth IEEE International Conference on. Local outlier factor \u00b6 The neighbors.LocalOutlierFactor (LOF) algorithm computes a score (called local outlier factor) reflecting the degree of abnormality of the observations. It measures the local density deviation of a given data point with respect to its neighbors. The idea is to detect the samples that have a substantially lower density than their neighbors. References: Breunig, Kriegel, Ng, and Sander (2000) LOF: identifying density-based local outliers. Proc. ACM SIGMOD Robust covariance \u00b6 The scikit-learn provides an object covariance.EllipticEnvelope that fits a robust covariance estimate to the data, and thus fits an ellipse to the central data points, ignoring points outside the central mode. References: Rousseeuw, P.J., Van Driessen, K. \u201cA fast algorithm for the minimum covariance determinant estimator\u201d. Technometrics 41(3), 212 (1999)","title":"outlierml"},{"location":"outlierml/#outlierml","text":"outlierml is a small python library to detect outliers in 2D arrays based on scikit-learn outlier detection functions: Local Outlier Factor (LOF), Robust Covariance (RC) and Isolation Forest (IF).","title":"outlierml"},{"location":"outlierml/#installation","text":"Just run this line pip install git+https://github.com/jsosa/outlierml.git","title":"Installation"},{"location":"outlierml/#dependencies","text":"Pandas xarray scikit-learn","title":"Dependencies"},{"location":"outlierml/#usage","text":"It includes a command-line tool that can be called through >> outlierml -i <initfile> where <initfile> is a text file including the following information [outlierml] file = NetCDF file path method = <LOF> for Local Outlier Factor , <RC> for Robust Covariance , <IF> for Isolation Forest outputdir = Output directory contamination = Contamination fraction from 0 to 1 decomposition = True or False to deseasonalize time series The command-line program generates two files: stats.nc and log.csv containing information on when and where outliers happened. The outlierml module can also be called via from outlierml import run_outlierml where run_outlierml is a function which receives a xarray.Dataset object and returns 1) a mask with outliers in a xarray.DataArray object and 2) a pd.DataFrame object, same but in tabular format ```python def run_outlierml(nc,method,contamination,varname,latname,lonname,timname,decomposition=False): \"\"\" Function which detects outliers in a xarray.Dataset Inputs ------ nc : (xarray.Dataset) method : Local Outlier Factor (LOF), Robust Covariance (RC), Isolation Forest (IF) contamination : Contamination fraction from 0 to 1 decomposition : True or False time series to deseasonalization varname : (string) with varname label latname : (string) with latitude label lonname : (string) with longitude label timname : (string) with time label Returns ------- foo : (xarray.DataArray) containing freq, mean, std csv : (pd.DataFrame) containing time, lat, lon, value, mean, std \"\"\" ```","title":"Usage"},{"location":"outlierml/#isolation-forest","text":"One efficient way of performing outlier detection in high-dimensional datasets is to use random forests. The ensemble.IsolationForest \u2018isolates\u2019 observations by randomly selecting a feature and then randomly selecting a split value between the maximum and minimum values of the selected feature. References: Liu, Fei Tony, Ting, Kai Ming and Zhou, Zhi-Hua. \u201cIsolation forest.\u201d Data Mining, 2008. ICDM\u201808. Eighth IEEE International Conference on.","title":"Isolation forest"},{"location":"outlierml/#local-outlier-factor","text":"The neighbors.LocalOutlierFactor (LOF) algorithm computes a score (called local outlier factor) reflecting the degree of abnormality of the observations. It measures the local density deviation of a given data point with respect to its neighbors. The idea is to detect the samples that have a substantially lower density than their neighbors. References: Breunig, Kriegel, Ng, and Sander (2000) LOF: identifying density-based local outliers. Proc. ACM SIGMOD","title":"Local outlier factor"},{"location":"outlierml/#robust-covariance","text":"The scikit-learn provides an object covariance.EllipticEnvelope that fits a robust covariance estimate to the data, and thus fits an ellipse to the central data points, ignoring points outside the central mode. References: Rousseeuw, P.J., Van Driessen, K. \u201cA fast algorithm for the minimum covariance determinant estimator\u201d. Technometrics 41(3), 212 (1999)","title":"Robust covariance"},{"location":"projects/","text":"Projects \u00b6 Some projects I've been involved in First Street Foundation \u00b6 a non-profit research and technology group committed to defining America\u2019s flood risk Using cutting edge modeling techniques validated through the peer-review process, the Foundation\u2019s team of best in class data scientists, modelers, and researchers are working to calculate the past, present, and future flood risk of every home and property in the United States. The First Street Foundation Flood Model and resulting data will allow Americans to make informed decisions when purchasing or selling a home while giving world renowned researchers from the country\u2019s top academic institutions the ability to analyze the economic, fiscal, and social impacts of the country\u2019s changing flood risk. https://firststreet.org System-Risk \u00b6 a large scale systems approach to flood risk assessment and management I'm part of the System-Risk project a Marie-Sk\u0142odowska-Curie European Training Network which aims to develop and implement a systems approach for large scale flood risk assessment and management. This project funded my PhD and I contributed to the development of tools to map flood risk at large scale and high resolution. Within the project I created LFPtools , a Python library to quickly prepare flood inundation models worldwide. I created the EUFLOOD framework, a Python framework to map riverine flooding in any basin in Europe. I'm the lead author of EUFLOOD-REA , a project which combines LFPtools and EUFLOOD to reconstruct riverine flooding in Europe. I'm the lead author of EUFLOOD-HAZ , a project which analyse European past flood events from a flood hazard/risk perspective. I collaborated on the creation of MERIT Hydro , a high-resolution global hydrography map based on latest topography datasets. https://system-risk.eu","title":"Projects"},{"location":"projects/#projects","text":"Some projects I've been involved in","title":"Projects"},{"location":"projects/#first-street-foundation","text":"a non-profit research and technology group committed to defining America\u2019s flood risk Using cutting edge modeling techniques validated through the peer-review process, the Foundation\u2019s team of best in class data scientists, modelers, and researchers are working to calculate the past, present, and future flood risk of every home and property in the United States. The First Street Foundation Flood Model and resulting data will allow Americans to make informed decisions when purchasing or selling a home while giving world renowned researchers from the country\u2019s top academic institutions the ability to analyze the economic, fiscal, and social impacts of the country\u2019s changing flood risk. https://firststreet.org","title":"First Street Foundation"},{"location":"projects/#system-risk","text":"a large scale systems approach to flood risk assessment and management I'm part of the System-Risk project a Marie-Sk\u0142odowska-Curie European Training Network which aims to develop and implement a systems approach for large scale flood risk assessment and management. This project funded my PhD and I contributed to the development of tools to map flood risk at large scale and high resolution. Within the project I created LFPtools , a Python library to quickly prepare flood inundation models worldwide. I created the EUFLOOD framework, a Python framework to map riverine flooding in any basin in Europe. I'm the lead author of EUFLOOD-REA , a project which combines LFPtools and EUFLOOD to reconstruct riverine flooding in Europe. I'm the lead author of EUFLOOD-HAZ , a project which analyse European past flood events from a flood hazard/risk perspective. I collaborated on the creation of MERIT Hydro , a high-resolution global hydrography map based on latest topography datasets. https://system-risk.eu","title":"System-Risk"},{"location":"resume/","text":"Resume \u00b6 Interests \u00b6 Natural hazards, flooding, ocean surface waves, sediment transport Python, big data, cloud, data visualization, deep learning, data analysis Education \u00b6 2020: PhD Physical Geography (Flood Risk) , University of Bristol. Bristol, UK 2016: MSc Environmental Fluid Mechanics , University of Grenoble. Grenoble, FR 2014: BSc Mechanical Engineering , Universidad San Francisco de Quito. Quito, EC Experience \u00b6 2020: Senior Developer , Fathom . Bristol, UK 2019: Marie Curie Early Stage Researcher , University of Bristol. Bristol, UK 2019: Research visitor , GFZ-Potsdam. Potsdam, DE 2018: Research visitor , University of Bologna. Bologna, IT 2016: Intern , Deltares. Delft, NL 2015: Research assistant , Escuela Politecnica Nacional. Quito, EC 2014: Research visitor , Institute of Marine Sciences. Venice, IT 2010: Research assistant , Universidad San Francisco de Quito. Quito, EC Skills \u00b6 Programming: Python, Matlab, Fortran, C++, R, Shell/Bash Python: Jupyter lab/notebook, Cython, Pandas, GeoPandas, xarray, Dask, scikit-learn, statsmodels, TensorFlow via Keras, Pytorch via fastai, multiprocessing Geospatial analysis: GDAL, Google Earth Engine, Pangeo, Mapbox, OpenStreetMap via osmfilter/osmconvert, WhiteboxTools, RichDEM, TauDEM, QGIS, ArcGIS Data visualization: Leaflet via folium, Bokeh, Datashader, D3 via Altair, Matplotib, Plotly, seaborn, Blender3D Cloud: Binder, Google Colab, AWS, Google Cloud Big data: Spark via PySpark/Databricks, SQL, PostGIS Productivity: Git, Travis CI, Docker, \\LaTeX, Inkscape, Adobe Illustrator, Tableau, VSCode, Sublime File formats: netCDF, Zarr, Parquet, GDAL-forrmats, GeoJSON, Shapefile, GeoPackage, osm/o5m Numerical models: LISFLOOD-FP, Delft3D, SWAN, Wflow, WaveWatchIII OS: Windows, OSX, Unix/Linux, HPC (Slurm, PBS/Torque) Peer-reviewed articles \u00b6 Portilla-Yand\u00fan, J., Salazar, A., Sosa, J. , Latandret S., Cavaleri, L. (2020) Modeling multiple wave systems in the eastern equatorial Pacific. Ocean Dynamics. https://doi.org/10.1007/s10236-020-01370-8 Sosa, J. , Sampson, C., Smith, A., Neal, J., Bates, P. (2020). A toolbox to quickly prepare flood inundation models for LISFLOOD-FP simulations. Environmental Modelling & Software, 123, 104561. https://doi.org/10.1016/j.envsoft.2019.104561 Yamazaki, D., Ikeshima, D., Sosa, J. , Bates, P. D., Allen, G., Pavelsky, T. (2019). MERIT Hydro: A high\u2010resolution global hydrography map based on latest topography datasets. Water Resources Research 55 (6), 5053-5073. https://doi.org/10.1029/2019WR024873 Giardino, A., Schrijvershof, R., Nederhoff, C.M., de Vroeg, H., Bri\u00e8re, C., Tonnon, P.-K., Caires, S., Walstra, D.J. Sosa, J. , van Verseveld, W., Schellekens, J., Sloff, C.J. (2018). A quantitative assessment of human interventions and climate change on the West African sediment budget. Ocean and Coastal Management, 156, 249\u2013265. https://doi.org/10.1016/j.ocecoaman.2017.11.008 Sosa, J. , Cavaleri, L. Portilla-Yand\u00fan, J. (2017). On the interaction between ocean surface waves and seamounts. Ocean Dynamics, 67, 1553\u20131565. https://doi.org/10.1007/s10236-017-1107-7 Portilla, J., Sosa, J. Cavaleri, L. (2013). Wave energy resources: Wave climate and exploitation. Renewable Energy, 57, 594\u2013605. https://doi.org/10.1016/j.renene.2013.02.032 Oral and poster presentations \u00b6 Global Flood Partnership 2019 . A flood inundation hindcast for Europe based on 26-year simulated streamflow, validation. https://bit.ly/jsosagfp19 CSDMS 2019 . LFPtools, a package to quickly prepare flood inundation models for LISFLOOD-FP. https://bit.ly/jsosacsdms19 AGU 2018 . A flood inundation hindcast for Europe based on 24-year simulated streamflow, validation. https://bit.ly/jsosaagu18 Global Flood Partnership 2018 . A multipurpose flood inundation framework for Europe. https://bit.ly/jsosagfp18 EGU 2018 . A flood inundation reanalysis of Europe. https://bit.ly/jsosaegu18","title":"Resume"},{"location":"resume/#resume","text":"","title":"Resume"},{"location":"resume/#interests","text":"Natural hazards, flooding, ocean surface waves, sediment transport Python, big data, cloud, data visualization, deep learning, data analysis","title":"Interests"},{"location":"resume/#education","text":"2020: PhD Physical Geography (Flood Risk) , University of Bristol. Bristol, UK 2016: MSc Environmental Fluid Mechanics , University of Grenoble. Grenoble, FR 2014: BSc Mechanical Engineering , Universidad San Francisco de Quito. Quito, EC","title":"Education"},{"location":"resume/#experience","text":"2020: Senior Developer , Fathom . Bristol, UK 2019: Marie Curie Early Stage Researcher , University of Bristol. Bristol, UK 2019: Research visitor , GFZ-Potsdam. Potsdam, DE 2018: Research visitor , University of Bologna. Bologna, IT 2016: Intern , Deltares. Delft, NL 2015: Research assistant , Escuela Politecnica Nacional. Quito, EC 2014: Research visitor , Institute of Marine Sciences. Venice, IT 2010: Research assistant , Universidad San Francisco de Quito. Quito, EC","title":"Experience"},{"location":"resume/#skills","text":"Programming: Python, Matlab, Fortran, C++, R, Shell/Bash Python: Jupyter lab/notebook, Cython, Pandas, GeoPandas, xarray, Dask, scikit-learn, statsmodels, TensorFlow via Keras, Pytorch via fastai, multiprocessing Geospatial analysis: GDAL, Google Earth Engine, Pangeo, Mapbox, OpenStreetMap via osmfilter/osmconvert, WhiteboxTools, RichDEM, TauDEM, QGIS, ArcGIS Data visualization: Leaflet via folium, Bokeh, Datashader, D3 via Altair, Matplotib, Plotly, seaborn, Blender3D Cloud: Binder, Google Colab, AWS, Google Cloud Big data: Spark via PySpark/Databricks, SQL, PostGIS Productivity: Git, Travis CI, Docker, \\LaTeX, Inkscape, Adobe Illustrator, Tableau, VSCode, Sublime File formats: netCDF, Zarr, Parquet, GDAL-forrmats, GeoJSON, Shapefile, GeoPackage, osm/o5m Numerical models: LISFLOOD-FP, Delft3D, SWAN, Wflow, WaveWatchIII OS: Windows, OSX, Unix/Linux, HPC (Slurm, PBS/Torque)","title":"Skills"},{"location":"resume/#peer-reviewed-articles","text":"Portilla-Yand\u00fan, J., Salazar, A., Sosa, J. , Latandret S., Cavaleri, L. (2020) Modeling multiple wave systems in the eastern equatorial Pacific. Ocean Dynamics. https://doi.org/10.1007/s10236-020-01370-8 Sosa, J. , Sampson, C., Smith, A., Neal, J., Bates, P. (2020). A toolbox to quickly prepare flood inundation models for LISFLOOD-FP simulations. Environmental Modelling & Software, 123, 104561. https://doi.org/10.1016/j.envsoft.2019.104561 Yamazaki, D., Ikeshima, D., Sosa, J. , Bates, P. D., Allen, G., Pavelsky, T. (2019). MERIT Hydro: A high\u2010resolution global hydrography map based on latest topography datasets. Water Resources Research 55 (6), 5053-5073. https://doi.org/10.1029/2019WR024873 Giardino, A., Schrijvershof, R., Nederhoff, C.M., de Vroeg, H., Bri\u00e8re, C., Tonnon, P.-K., Caires, S., Walstra, D.J. Sosa, J. , van Verseveld, W., Schellekens, J., Sloff, C.J. (2018). A quantitative assessment of human interventions and climate change on the West African sediment budget. Ocean and Coastal Management, 156, 249\u2013265. https://doi.org/10.1016/j.ocecoaman.2017.11.008 Sosa, J. , Cavaleri, L. Portilla-Yand\u00fan, J. (2017). On the interaction between ocean surface waves and seamounts. Ocean Dynamics, 67, 1553\u20131565. https://doi.org/10.1007/s10236-017-1107-7 Portilla, J., Sosa, J. Cavaleri, L. (2013). Wave energy resources: Wave climate and exploitation. Renewable Energy, 57, 594\u2013605. https://doi.org/10.1016/j.renene.2013.02.032","title":"Peer-reviewed articles"},{"location":"resume/#oral-and-poster-presentations","text":"Global Flood Partnership 2019 . A flood inundation hindcast for Europe based on 26-year simulated streamflow, validation. https://bit.ly/jsosagfp19 CSDMS 2019 . LFPtools, a package to quickly prepare flood inundation models for LISFLOOD-FP. https://bit.ly/jsosacsdms19 AGU 2018 . A flood inundation hindcast for Europe based on 24-year simulated streamflow, validation. https://bit.ly/jsosaagu18 Global Flood Partnership 2018 . A multipurpose flood inundation framework for Europe. https://bit.ly/jsosagfp18 EGU 2018 . A flood inundation reanalysis of Europe. https://bit.ly/jsosaegu18","title":"Oral and poster presentations"}]}